"use strict";
"use strict";var newsletter_cb=null,newsletter_script=null,newsletter_forms=[];!function(){var e=document.getElementsByClassName("newsletter__form"),t=document.getElementsByTagName("head")[0],s=function(e,s){newsletter_script=document.createElement("script"),newsletter_script.src=e+"&EMAIL="+s[0].value,t.appendChild(newsletter_script)},r=function(e){var t=this;t.form=e,t.formurl=t.form.getAttribute("action"),t.button=t.form.getElementsByClassName("newsletter__submit")[0],t.input=t.form.getElementsByClassName("newsletter__input")[0],t.msg=t.form.getElementsByClassName("newsletter__message")[0],t.submit=function(e){e.preventDefault(),t.form.classList.remove("in-progress"),t.form.classList.remove("error"),t.form.classList.remove("complete"),t.form.classList.add("in-progress"),s(t.formurl,[t.input])},t.form.addEventListener("submit",t.submit),newsletter_forms[newsletter_forms.length]=t},n=function(){for(var t=0;t<e.length;t++)e[t]=new r(e[t])};newsletter_cb=function(e){for(var s=e.result,r=e.msg,n="",l="",o=newsletter_forms.length-1;o>=0;o--)if(newsletter_forms[o].form.classList.contains("in-progress")){var m=newsletter_forms[o];break}switch(m.msg.style.display="inline-block",s){case"success":n='<span class="home-box-newsletter-title"">Success!</span><br/>'+r,l="complete";break;case"error":n=r.split(" - ")[1],l="error";break;default:n="Oops, something went wrong. Try again later.",l="error"}m.msg.innerHTML=n,m.form.classList.remove("in-progress"),m.form.classList.add(l),t.removeChild(newsletter_script),newsletter_script=null},n()}();
"use strict";!function(){var e=document.getElementsByClassName("side-tap")[0],t=document.body;e.addEventListener("click",function(e){return t.classList.toggle("side-tap--open")})}();
"use strict";!function(){var t=(document.getElementsByClassName("sticky"),function(t){this.el=t,this.par=t.parentNode,this.el_start=null,this.el_end=null,this.init()});t.prototype.scroll=function(){},t.prototype.resize=function(){},t.prototype.init=function(){window.addEventListener("resize",this.resize),window.addEventListener("scroll",this.scroll)}}();
//# sourceMappingURL=data:application/json;base64,
